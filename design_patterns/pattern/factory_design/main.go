package main
/*
工厂模式:
分为三种更加细分的类型:简单工厂、工厂方法和抽象工厂。
简单工厂:
简单工厂模式有两种实现方式，一种是每次都返回新创建的对象，另一种是每次都返回 同一个事先创建好的对象，也就是所谓的单例对象。
如果对象不可复用，那工厂类每次都要返回不同的对象。如果我们使用简单工厂模式来实现，就只能选择第一种包含if分支逻辑的实现方式。
工厂方法模式:
利用多态，比起简单工厂模式更加符合开闭原则。
当对象的创建逻辑比较复杂，不只是简单的new一下就可以，而是要组合其他类对象， 做各种初始化操作的时候，我们推荐使用工厂方法模式，将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类都不至于过于复杂。
抽象工厂:
我们可以让一个工厂负责创建多个不同类型的对象 (IRuleConfigParser、ISystemConfigParser等)，而不是只创建一种parser对象。

封装变化:创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。
代码复用:创建代码抽离到独立的工厂类之后可以复用。
隔离复杂性:封装复杂的创建逻辑，调用者无需了解如何创建对象。
控制复杂度:将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁。

DI容器的核心功能一般有三个:配置解析、对象创建和对象生命周期管理。
 */
func main() {

}
