package main

/*
适配器模式：
类适配器使用继承关系来实现，对象适配器使用组合关系来实现。
适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷。
1.封装有缺陷的接口设计
2.统一多个类的接口设计
3.替换依赖的外部系统
4.兼容老版本接口
5.适配不同格式的数据

代理模式:代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非 加强功能，这是它跟装饰器模式最大的不同。
桥接模式:桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相对独立地加以改 变。
装饰器模式:装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌 套使用。
适配器模式:适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理模式、装饰器模 式提供的都是跟原始类相同的接口。
 */
func main(){

}
