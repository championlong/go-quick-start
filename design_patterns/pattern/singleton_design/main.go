package main
/*
创建型设计模式包括：单例模式、工厂模式、建造者模式、原型模式
单例设计模式:
一个类只允许创建一个对象(或者实例)，那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。
关注点:
构造函数需要是private访问权限的，这样才能避免外部通过new创建实例;
考虑对象创建时的线程安全问题;
考虑是否支持延迟加载;
考虑getInstance()性能是否高(是否加锁)。

1.饿汉式:
在类加载的时候，instance静态实例就已经创建并初始化好了，所以， instance实例的创建过程是线程安全的。
2.懒汉式:
支持延迟加载，在真正用到的时候，再创建实例。
3.双重检测:
既支持延迟加载、又支持高并发的单例实现方式
4.静态内部类:
利用Java的静态内部类。它有点类似饿汉式，但又能做到了延迟加载。
5.枚举:
通过Java枚举类型本身 的特性，保证了实例创建的线程安全性和实例的唯一性。

单例模式的问题:
1.单例对OOP特性的支持不友好:违背了基于接口而非实现的设计原则
2.单例会隐藏类之间的依赖关系
3.单例对代码的扩展性不友好
4.单例对代码的可测试性不友好:硬编码无法mock替换
5.单例不支持有参数的构造函数:init()函数传递参数、将参数放到getIntance()方法中、将参数放到另外一个全局变量中。
推荐使用:工厂模式、IOC容器保证
 */
func main() {

}
