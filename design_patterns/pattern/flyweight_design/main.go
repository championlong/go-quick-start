package main

/*
享元模式
“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省内存，前提是享元对象是不 可变对象。
当一个系统中存在大量重复对象的时候，如果这些重复的对象是不可变对象，我们就可以利用享 元模式将对象设计成享元，在内存中只保留一份实例，供多处代码引用。

享元模式跟缓存的区别：缓存，主要是为了提高访问效率，而非复用
享元模式跟单例的区别：享元模式中，一个类可以创建多个对象，每个对象被多处代 码引用共享
享元模式跟对象池的区别: 池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间。在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当 使用完成之后，放回到池中，再由其他使用者重复利用。
享元模式中的“复用”可以理解为“共享使用”， 在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间。

在Java中
Integer利用了享元模式：
Integer i1 = 56;
Integer i2 = 56;
System.out.println(i1 == i2); //true
因为在IntegerCache的代码实现(-128到127之间的数据)缓存的享元对象会被集中一次性创建好
String利用：
String s1 = "小争哥";
String s2 = "小争哥";
String s3 = new String("小争哥");
System.out.println(s1 == s2); //true
System.out.println(s1 == s3); //false
字符串常量第一次被用到的时候，存储到常量池中，当之后再用到的时候，直 接引用常量池中已经存在的即可，就不需要再重新创建了。
*/
func main() {

}
