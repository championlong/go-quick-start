package main

/*
结构型模式包括:代理模式、桥接模式、装饰器模式、适配器模式、⻔面模式、组合模式、享元模式。
代理模式:
在不改变原始类(或叫被代理类)的情况下，通过引入代理类来给原始类附加功能。我们让代理类和原始类实现同样的接口。但是，如果原始类并没有定义接口，并且原始类代码并不是我们开发维护 的。在这种情况下，我们可以通过让代理类继承原始类的方法来实现代理模式。
动态代理的原理与实现:
静态代理需要针对每个类都创建一个代理类, 动态代理不事先为每个原 始类编写代理类，而是在运行的时候动态地创建原始类对应的代理类，然后在系统中用代理类替换掉原始 类。
代理模式的应用场景:
代理模式常用在业务系统中开发一些非功能性需求，比如:监控、统计、鉴权、限流、事务、幂等、日志。代理模式还可以用在RPC、缓存等应用场景中。
*/
func main()  {

}
